@tailwind base;
@tailwind components;
@tailwind utilities;

/* TODO: make a light mode scheme */
/* :root {
  --foreground-rgb: 0, 0, 0;
  --background-start-rgb: 214, 219, 220;
  --background-end-rgb: 255, 255, 255;
  --sidebar-width: 4rem;
} */

:root, html[data-theme='dark'] {
  --color-primary: rgb(159 212 156);
  --color-surface-tint: rgb(159 212 156);
  --color-on-primary: rgb(6 57 17);
  --color-primary-container: rgb(33 80 38);
  --color-on-primary-container: rgb(186 240 182);
  --color-secondary: rgb(185 204 180);
  --color-on-secondary: rgb(37 52 36);
  --color-secondary-container: rgb(59 75 57);
  --color-on-secondary-container: rgb(213 232 207);
  --color-tertiary: rgb(161 206 213);
  --color-on-tertiary: rgb(0 54 60);
  --color-tertiary-container: rgb(31 77 83);
  --color-on-tertiary-container: rgb(188 235 241);
  --color-error: rgb(255 180 171);
  --color-on-error: rgb(105 0 5);
  --color-error-container: rgb(147 0 10);
  --color-on-error-container: rgb(255 218 214);
  --color-background: rgb(16 20 15);
  --color-on-background: rgb(224 228 219);
  --color-surface: rgb(16 20 15);
  --color-on-surface: rgb(224 228 219);
  --color-surface-variant: rgb(66 73 64);
  --color-on-surface-variant: rgb(194 201 189);
  --color-outline: rgb(140 147 136);
  --color-outline-variant: rgb(66 73 64);
  --color-inverse-surface: rgb(224 228 219);
  --color-inverse-on-surface: rgb(45 50 44);
  --color-inverse-primary: rgb(57 105 59);
  --color-surface-dim: rgb(16 20 15);
  --color-surface-bright: rgb(54 58 52);
  --color-surface-container-lowest: rgb(11 15 10);
  --color-surface-container-low: rgb(24 29 23);
  --color-surface-container: rgb(28 33 27);
  --color-surface-container-high: rgb(39 43 37);
  --color-surface-container-highest: rgb(50 54 48);
  --sidebar-width: 12rem;
  --header-height: 3rem;
}

html[data-theme='light'] {
  --foreground-rgb: 240, 240, 240;
  --background-rgb: 255, 255, 255;
  --secondary-rgb: 24, 25, 24;
  --tertiary-rgb: 44, 45, 44;
  --border-rgb: 80, 80, 80;
  --accent-rgb: 25, 80, 33;
}

body {
  color: var(--color-on-surface);
  background-color: var(--color-background);
  border-color: var(--color-outline-variant);
  overflow: hidden;
}

input, textarea, .raised-button, .filled-button {
  padding: 0.75rem;
  border-radius: 0.5rem;
  background-color: var(--color-surface-container);
  border: 1px solid var(--color-outline);
  resize: none;
  overflow: auto;
  transition: all 100ms;
}
.raised-button {
  background-color: var(--color-surface-container-high);
  border: unset;
}
.filled-button {
  background-color: var(--color-primary-container);
  color: var(--color-on-primary-container);
}

.react-select__input {
  box-shadow: unset !important;
}
input:focus, textarea:focus, .raised-button:focus, .filled-button:focus {
  background-color: var(--color-surface-container-high);
  box-shadow: 0 0 1px 1px var(--color-primary);
  outline: 0px;
}
.raised-button:focus {
  background-color: var(--color-surface-container-highest);
}
.filled-button:focus {
  background-color: var(--color-on-primary);
}
.rc-slider-handle:focus {
  box-shadow: 0 0 1px 2px var(--color-primary);
  outline: 0px;
}

/* I know this isn't proper but this works for now */
input:disabled, textarea:disabled, .rc-slider-disabled {
  opacity: 0.38;
}

input::placeholder, textarea::placeholder {
  color: var(--color-on-surface-variant);
}

input:hover, textarea:hover {
  border-color: var(--color-on-surface);
}
.rc-slider-handle:hover {
  background-color: var(--color-on-surface);
}
.raised-button:hover {
  background-color: var(--color-surface-container-highest);
}
.filled-button:hover {
  background-color: var(--color-on-primary);
}

/* The slider library poorly supports style (e.g. can't change pseudoelements
   like hover or active) so just completely redefine our own, excluding unused
   elements */
.rc-slider {
  position: relative;
  width: 100%;
  height: 14px;
  padding: 5px 0;
  border-radius: 6px;
  touch-action: none;
  box-sizing: border-box;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
}

.rc-slider * {
  box-sizing: border-box;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
}

.rc-slider-rail {
  position: absolute;
  width: 100%;
  height: 6px;
  background-color: var(--color-surface-variant);
  border-radius: 6px;
}
.rc-slider-track,
.rc-slider-tracks {
  position: absolute;
  height: 6px;
  background-color: var(--color-primary);
  border-radius: 6px;
}
.rc-slider-track-draggable {
  z-index: 1;
  box-sizing: content-box;
  background-clip: content-box;
  border-top: 5px solid rgba(0, 0, 0, 0);
  border-bottom: 5px solid rgba(0, 0, 0, 0);
  transform: translateY(-5px);
}
.rc-slider-handle {
  position: absolute;
  z-index: 1;
  width: 14px;
  height: 14px;
  margin-top: -4px;
  background-color: var(--color-outline);
  border-radius: 50%;
  cursor: pointer;
  cursor: grab;
  -webkit-user-select: none;
     -moz-user-select: none;
          user-select: none;
  touch-action: pan-x;
  transition: all 100ms, transform 0ms, left 0ms;
}

.rc-slider-handle-dragging.rc-slider-handle-dragging.rc-slider-handle-dragging,
.rc-slider-handle:active {
  scale: 1.15;
  translate: 7.5%;
  background-color: var(--color-on-surface);
  cursor: grabbing;
}

.rc-slider-handle-dragging.rc-slider-handle-dragging.rc-slider-handle-dragging-delete {
  opacity: 0;
}

.rc-slider-step, .rc-slider-mar {
  display: none;
}

.rc-slider-disabled .rc-slider-handle,
.rc-slider-disabled .rc-slider-handle:hover {
  cursor: inherit;
}

::-webkit-scrollbar {
  width: 0.7rem;
  background-color: inherit;
}

::-webkit-scrollbar-thumb {
  background-color: var(--color-surface-container-high);
}

::-webkit-scrollbar-thumb:hover {
  background-color: var(--color-surface-container-highest);
}

::-webkit-scrollbar-thumb:active {
  background-color: var(--color-surface-variant);
}

@supports not selector(::-webkit-scrollbar) {
  body {
    scrollbar-color: inherit var(--color-surface-container-high);
  }
}

hr {
  border-color: var(--color-outline);
}

.flex-center {
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
}